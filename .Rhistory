#create a raster stack from the list
rastStack <- stack(allCropped)
library(animation)
a<- animate(rastStack)
a
saveGIF(animate(rastStack), "temp.gif")
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
animate(rastStack)
animate(rastStack)
animate(rastStack,pause=0.50)
animate(rastStack,pause=1)
install.packages("gganimate")
animate(rastStack,pause=1)+ plot(ploy, add=TRUE)
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
#if(!file.exists(path_gif)) { # Check if the file exists
saveMovie(
for (i in 1:length(allCropped)) {
plot(rastStack[[i]],
main=names(rastStack[[i]]),
legend.lab="NDVI",
col=rev(terrain.colors(30))
)
},
movie.name = 'temp.gif',
ani.width = 300, ani.height = 300,
interval=.5, ani.options(convert = 'C:/Program Files/ImageMagick-7.0.7-Q16/magick.exe'))
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
library(animation)
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
source('C:/Users/deva4998/Desktop/tiff_to_gif.R')
data(trees)
data(ChickWeight)
head(trees)
head(ChickWeight)
library(snotelr)
snotel.explorer()
a<-download.snotel(site = 623)
snotel.info(path = ".")
data = snotel.info(path = NULL)
download.snotel(site = 623)
a<-download.snotel(site = 623)
data
tidy(mg)
# let's simulate the data the explanatory variables: temperature (x1),
# precipitation (x2) and the treatment (1=Control, 2= N addition)
set.seed(1)
x1 <- rnorm(100, 10, 2)
x2 <- rnorm(100, 100, 10)
modmat <- model.matrix(~x1 + x2, data = data.frame(x1, x2))
vector of fixed effect
betas <- c(10, 2, 0.2, 3)
vector of fixed effect
betas <- c(10, 2, 0.2)
betas <- c(10, 2, 0.2)
y <- rnorm(n = 100, mean = modmat %*% betas, sd = 1)
# first model
m <- lm(y ~ x1 + x2)
m$coefficients[1]
m$coefficients[2]
summary(m)
install.packages("dataone")
install.packages("dataone")
library (dataone)
cn <- CNode("PROD")
mn <- getMNode(cn, "urn:node:KNB")
library(XML)
metadata <- rawToChar(getObject(mn, id))
doc = xmlRoot(xmlTreeParse(metadata, asText=TRUE, trim = TRUE, ignoreBlanks = TRUE))
tf <- tempfile()
saveXML(doc, tf)
file.show(tf)
library(dataone)
cn <- CNode("PROD")
mn <- getMNode(cn, "urn:node:KNB")
mySearchTerms <- list(q="abstract:salmon+AND+keywords:spawn+AND+keywords:chinook",
fl="id,title,dateUploaded,abstract,size",
fq="dateUploaded:[2017-06-01T00:00:00.000Z TO 2017-07-01T00:00:00.000Z]",
sort="dateUploaded+desc")
result <- query(mn, solrQuery=mySearchTerms, as="data.frame")
result[1,c("id", "title")]
id <- result[1,'id']
cn <- CNode("PROD")
mn <- getMNode(cn, "urn:node:LTER")
mn
qy <- dataone::query(cn, list(
rows = "300",
q    = "title:*stream chemistry*",
fq   = "(title:*streamflow*)",
fl   = "id,title,dateModified"),
as = "data.frame"))
qy <- dataone::query(cn, list(
rows = "300",
q    = "title:*stream*",
fq   = "(title:*streamflow*)",
fl   = "id,title,dateModified"),
as = "data.frame"))
qy <- dataone::query(cn, list(
rows = "300",
q    = "title:*stream*",
fq   = "(title:*streamflow*)",
fl   = "id,title,dateModified"),
as = "data.frame")
qy
library(dplyr)
qy <- slice(qy, grep("^doi", id, invert = TRUE)))
qy <- slice(qy, grep("^doi", id, invert = TRUE))
qy
qy <- arrange(qy, desc(id), desc(dateModified))
qy
library(dplyr)
library(datone)
qy <- dataone::query(cn, list(
rows = "300",
q    = "title:*stream chemistry*",
fq   = "(title:*streamflow*)",
fl   = "id,title,dateModified"),
as = "data.frame"))
qy <- slice(qy, grep("^doi", id, invert = TRUE)))
qy <- arrange(qy, desc(id), desc(dateModified))
library(dplyr)
library(datone)
qy <- dataone::query(cn, list(
rows = "300",
q    = "title:*stream chemistry*",
fq   = "(title:*streamflow*)",
fl   = "id,title,dateModified"),
as = "data.frame"))
qy <- slice(qy, grep("^doi", id, invert = TRUE))
qy <- arrange(qy, desc(id), desc(dateModified))
qy
typeof(qy)
yy[20]
qy[20]
qy[20:]
qy[:, 1]
tail(qy)
mySearchTerms <- list(q="https://portal.edirepository.org:443/nis/simpleSearch?defType=edismax&q=*:*&fq=scope:(knb-lter-and)&fq=-scope:ecotrends&fq=-scope:lter-landsat*&fl=id,packageid,title,author,organization,pubdate,coordinates&debug=false",
fl="id,packageid,title,author,organization,pubdate,coordinates&debug=false",
fq="dateUploaded:[2017-06-01T00:00:00.000Z TO 2017-07-01T00:00:00.000Z]",
sort="dateUploaded+desc")
mySearchTerms
mySearchTerms <- list(q="https://portal.edirepository.org:443/nis/simpleSearch?defType=edismax&q=*:*&fq=scope:(knb-lter-and)&fq=-scope:ecotrends&fq=-scope:lter-landsat*&fl=id,packageid,title,author,organization,pubdate,coordinates&debug=false",
fl="id,packageid,title,author,organization,pubdate,coordinates&debug=false",
fq="dateUploaded:[2017-06-01T00:00:00.000Z TO 2017-07-01T00:00:00.000Z]",
sort="dateUploaded+desc")
result <- query(mn, solrQuery=mySearchTerms, as="data.frame")
dataRaw <- getObject(mn, "knb-lter-hbr.1")
id
library(dplyr)
library(datone)
qy <- dataone::query(cn, list(
rows = "300",
q    = "title:*stream chemistry*",
fq   = "(title:*streamflow*)",
fl   = "id,title,dateModified"),
as = "data.frame"))
qy <- slice(qy, grep("^doi", id, invert = TRUE))
qy <- arrange(qy, desc(id), desc(dateModified))
i
id
title
print(qy)
qy[20:, :]
qy[20, :]
qy[20]
qy[:3]
qy[2]
qy[1]
qy[0]
qy[2]
qy[3]
qy[3][1]
qy[3][20]
qy[3]
View(qy)
View(qy)
library(dplyr)
library(datone)
qy <- dataone::query(cn, list(
rows = "300",
q    = "title:*streamflow*",
fq   = "(title:*chemistry*)",
fl   = "id,title,dateModified"),
as = "data.frame"))
qy <- slice(qy, grep("^doi", id, invert = TRUE))
qy <- arrange(qy, desc(id), desc(dateModified))
library(dplyr)
library(datone)
qy <- dataone::query(cn, list(
rows = "300",
q    = "title:*streamflow*",
fq   = "(title:*streamflow*)",
fl   = "id,title,dateModified"),
as = "data.frame"))
qy <- slice(qy, grep("^doi", id, invert = TRUE))
qy <- arrange(qy, desc(id), desc(dateModified))
library(dataone)
install.packages("installr")
library(installr)
updateR()
install.packages("devtools")
install.packages("roxygen2")
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd(C:\Chinmay\Github)
setwd(C:/Chinmay/Github)
setwd("C:/Chinmay/Github")
devtools::create("Sorption")
getwd
getwd()
setwd("./Sorption")
getwd()
document()
document()
document()
document()
document()
devtools::load_all(".")
library(Sorption)
nstall.Rtools()
install.Rtools()
library(Sorption)
devtools::load_all(".")
devtools::load_all(".")
library(Sorption)
library(Sorption)
devtools::load_all(".")
library(Sorption)
library(Sorption)
library("Sorption", lib.loc="~/R/win-library/3.5")
?LangmuirParameters
detach("package:Sorption", unload=TRUE)
devtools::use_package("ggplot2")
devtools::use_package("ggpubr")
library(Sorption)
devtools::load_all(".")
library(Sorption)
library(Sorption)
devtools::document()
Ceq <- c("0",
"0",
"0",
"-0.006038647",
"-0.012077295",
"0.044858523",
"0.217391304",
"3.347135956"
)
Qeq <- c("0",
"0.5",
"12.5",
"125.1509662",
"250.3019324",
"498.8785369",
"744.5652174",
"1166.321601"
)
test_data <- data.frame(Ceq,Qeq)
test_data
test_data <- data.frame(Ceq,Qeq,row.names = FALSE)
test_data <- data.frame(Ceq,Qeq)
devtools::use_data(test_data)
devtools::load_all(".")
data<- test_data
data
data["Ceq"]
FreundlichPlot(data["Ceq"], data["Qeq"], 1,1,1,1,"test.pdf")
typeof(data["Ceq"])
data["Ceq"]
Ceq <- c("0",
"0",
"0",
"-0.006038647",
"-0.012077295",
"0.044858523",
"0.217391304",
"3.347135956"
)
typeof(Ceq)
Ceq <- c(0,
0,
0,
-0.006038647,
-0.012077295,
0.044858523,
0.217391304,
3.347135956
)
Qeq <- c(0,
0.5,
12.5,
125.1509662,
250.3019324,
498.8785369,
744.5652174,
1166.321601
)
test_data <- data.frame(Ceq,Qeq)
devtools::use_data(test_data)
devtools::load_all(".")
FreundlichPlot(data["Ceq"], data["Qeq"], 1,1,1,1,"test.pdf")
data<- test_data
FreundlichPlot(data["Ceq"], data["Qeq"], 1,1,1,1,"test.pdf")
FreundlichPlot(Ceq, Qeq, 1,1,1,1,"test.pdf")
log10(Ceq)
Ceq <- c(1,2,3,4,5,6,7,8)
Qeq <- c(1,2,3,4,5,6,7,8)
FreundlichPlot(Ceq, Qeq, 1,1,1,1,"test.pdf")
devtools::load_all(".")
FreundlichPlot(Ceq, Qeq, 1,1,1,1,"test.pdf")
FreundlichPlot(Ceq, Qeq, 0.6,0.6,0.6,0.6,"test.pdf")
FreundlichPlot(Ceq, Qeq, 0.,0.6,0.,0.8,"test.pdf")
FreundlichPlot(Ceq, Qeq, 0.,0.8,0.,0.9,"test.pdf")
test_data <- data.frame(Ceq,Qeq)
devtools::use_data(test_data)
devtools::load_all(".")
data<- test_data
FreundlichPlot(data["Ceq"], data["Qeq"], 0.,0.8,0.,0.9,"test.pdf")
devtools::use_data(Ceq,Qeq)
devtools::load_all(".")
Ceq <- Ceq
Ceq
typeof(Ceq)
devtools::load_all(".")
Ceq
devtools::use_data(as,numeric(Ceq),as.numeric(Qeq))
Qeq <- c(1,2,3,4,5,6,7,8)
Ceq <- c(1,2,3,4,5,6,7,8)
typeof(Ceq)
devtools::load_all(".")
rm(list = ls())
cat("\014")
devtools::load_all(".")
Ceq
Qeq
FreundlichPlot(Ceq, Qeq, 0.,0.8,0.,0.9,"test.pdf")
test_Ceq <- c(1,2,3,4,5,6,7,8)
test_Qeq <- c(1,2,3,4,5,6,7,8)
devtools::use_data(Ceq,Qeq)
devtools::use_data(Ceq,Qeq)
devtools::use_data(test_Ceq,test_Qeq)
rm(list = ls())
cat("\014")
devtools::load_all(".")
test_Ceq
test_Qeq
FreundlichPlot(Ceq, Qeq, 0.,0.8,0.,0.9,"test.pdf")
FreundlichPlot(test_Ceq, test_Qeq, 0.,0.8,0.,0.9,"test.pdf")
FreundlichParameters(test_Ceq, test_Qeq, "test.csv")
library(Sorption)
Rcmd.exe check --as-cran
devtools::document()
load("C:/Chinmay/Github/Sorption/data/test_Ceq.rda")
tools::checkRdaFiles()
library(Sorption)
library(Sorption)
library(Sorption)
Ceq
devtools::load_all(".")
test_Ceq
FreundlichPlot(test_Ceq, test_Qeq, 0.,0.8,0.,0.9,"test.pdf")
FreundlichParameters(test_Ceq, test_Qeq, "test.csv")
devtools::load_all(".")
library(Sorption)
packages <- c("XLConnect", "ggpubr", "ggplot2", "dplyr", "readr")
#
# #packages <- c("SorptionAnalysis", "broom", "XLConnect", "ggplot2")
#
inst_pkg(packages)
library(XLConnect)
wb <- loadWorkbook("C:/Chinmay/P_Batch_Isotherms/Isotherms_final_data_Tahoe_10_10_2018/Isotherms_final_data_with_Calibration_and_Calculations_10_22_2018.xlsx")
lst = readWorksheet(wb, sheet = getSheets(wb))
vars1 <- c("SampleID1","Ce.mg.P.L.","qe..mg.P.Kg.")
vars2 <- c("SampleID2","Ce.mg.P.L..1","qe..mg.P.Kg..1")
vars3 <- c("SampleID3","Ce.mg.P.L..2","qe..mg.P.Kg..2")
##### V-Non-Meadow####
VN<- lst$Volcanic_Non_Meadow_isotherms
VN3 <- VN[vars1][1:8,]
V8 <- VN[vars2][1:8,]
VN2 <- VN[vars3][1:8,]
##### V-Meadow####
VM<- lst$Volcanic_Meadow_Isotherms
V6 <- VM[vars1][1:8,]
V6$Ce.mg.P.L. <- as.numeric(V6$Ce.mg.P.L.)
V5 <- VM[vars2][1:8,]
V5$Ce.mg.P.L. <- as.numeric(V5$Ce.mg.P.L.)
VM1 <- VM[vars3][1:8,]
VM1$qe..mg.P.Kg..2 <- as.numeric(VM1$qe..mg.P.Kg..2)
##### G-Non-Meadow####
GN<- lst$Granitic_Non_Meadow_Isotherms
GN7 <- GN[vars1][1:8,]
GN4 <- GN[vars2][1:8,]
GN1 <- GN[vars3][1:8,]
##### G-Meadow####
GM<- lst$Granitic_Meadow_Isotherms
G7 <- GM[vars1][1:8,]
G1 <- GM[vars2][1:8,]
GM2 <- GM[vars3][1:8,]
FreundlichParameters(VN3$Ce.mg.P.L. , VN3$qe..mg.P.Kg. , output_fname ="C:/Chinmay/storagetemp/New folder/VN3.csv")
packrat::init()
install.packages("IDPmisc")
library(Sorption)
library(Sorption)
library(Sorption)
devtools::load_all(".")
install.packages("devtools")
library(Sorption)
devtools::install_github("devalc/Sorption")
version(Sorption)
version("Sorption")
library("Sorption", lib.loc="C:/Chinmay/Github/Sorption/packrat/lib/x86_64-w64-mingw32/3.5.2")
remove.packages("Sorption")
library(Sorption)
devtools::load_all(".")
library(Sorption)
library(XLconnect)
############################################################################################################
# -*- coding: utf-8 -*-
#Created on Thu Oct 22 12:55:41 2018
#@author: chinmay deval
#Object: Perform sorption analysis for meadow and non meadow soils in both
#volcanic and granitic watersheds
############################################################################################################
###############################clear environment and console###############################
rm(list = ls())
cat("\014")
###############################set working dir###############################
dir.create("C:/Chinmay/Github/PSorption/regression_outputs_Freundlich")
setwd("C:/Chinmay/Github/PSorption/")
###############################Load required packages###############################
source("recipies.R")
packages <- c("XLConnect", "ggpubr", "ggplot2","dplyr", "readr")
#
# #packages <- c("SorptionAnalysis", "broom", "XLConnect", "ggplot2")
#
inst_pkg(packages)
library(Sorption)
FreundlichParameters(test_Ceq,test_Qeq, "test.csv")
library(Sorption)
library(Sorption)
help(Sorption)
??Sorption
library(Sorption)
library(Sorption)
CalibrationCurve <- function(Ck,A){
fit <- lm(A ~ Ck)
c <- fit$coefficients[[1]]
m<- fit$coefficients[[2]]
slope_and_intercept <- c(m,c)
return(slope_and_intercept)
}
a <- c(1,2,3,4,5,6,7,8)
b <- c(1,2,3,4,5,6,7,8)
c <- CalibrationCurve(a,b)
c
CalibrationCurve <- function(Ck,A){
fit <- lm(A ~ Ck)
c <- fit$coefficients[[1]]
m<- fit$coefficients[[2]]
slope_and_intercept <- c(m,c)
return(slope_and_intercept)
}
CalibrationCurve <- function(Ck,A){
fit <- lm(A ~ Ck)
c <- fit$coefficients[[1]]
m<- fit$coefficients[[2]]
slope_and_intercept <-vector(mode="list", length=3)
names(slope_and_intercept) <- c(slope,intercept)
slope_and_intercept[[1]] <- m
slope_and_intercept[[2]] <- c
return(slope_and_intercept)
}
c <- CalibrationCurve(a,b)
CalibrationCurve <- function(Ck,A){
fit <- lm(A ~ Ck)
c <- fit$coefficients[[1]]
m<- fit$coefficients[[2]]
slope_and_intercept <-vector(mode="list", length=3)
names(slope_and_intercept) <- c("slope","intercept")
slope_and_intercept[[1]] <- m
slope_and_intercept[[2]] <- c
return(slope_and_intercept)
}
c <- CalibrationCurve(a,b)
c
c
c <- CalibrationCurve(a,b)
c
CalibrationCurve <- function(Ck,A){
fit <- lm(A ~ Ck)
c <- fit$coefficients[[1]]
m<- fit$coefficients[[2]]
slope_and_intercept <-vector(mode="list", length=2)
names(slope_and_intercept) <- c("slope","intercept")
slope_and_intercept[[1]] <- m
slope_and_intercept[[2]] <- c
return(slope_and_intercept)
}
c <- CalibrationCurve(a,b)
c
c$slope
c$intercept
